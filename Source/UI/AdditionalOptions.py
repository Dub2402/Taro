from dublib.TelebotUtils.Users import UsersManager
from dublib.TelebotUtils.Cache import TeleCache
from dublib.TelebotUtils import TeleMaster
from dublib.Engine.GetText import _
from dublib.TelebotUtils.Cache import RealCachedFile

from Source.Modules.EnergyExchange import OpenExchanger
from Source.InlineKeyboards import InlineKeyboards
from Source.Functions import IsSubscripted
from Source.UI.WorkpiecesMessages import WorkpiecesMessages

from telebot import TeleBot, types

#==========================================================================================#
# >>>>> INLINE_KEYBOARD <<<<< #
#==========================================================================================#

def keyboard_additional_options() -> types.InlineKeyboardMarkup:
	"""
	–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: 
		üíü –û–±–º–µ–Ω —ç–Ω–µ—Ä–≥–∏–µ–π
		üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è
		üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏
		‚óÄÔ∏è –ù–∞–∑–∞–¥

	:return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
	:rtype: types.InlineKeyboardMarkup
	"""
	Menu = types.InlineKeyboardMarkup()

	energy_exchange = types.InlineKeyboardButton(_("üíü –û–±–º–µ–Ω —ç–Ω–µ—Ä–≥–∏–µ–π"), callback_data = "energy_exchange")
	mailing_card_day = types.InlineKeyboardButton(_("üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è"), callback_data = "mailing_card_day")
	share = types.InlineKeyboardButton(_("üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"), callback_data = "share")
	back = types.InlineKeyboardButton(_("‚óÄÔ∏è –ù–∞–∑–∞–¥"), callback_data = "main_menu")

	Menu.add(energy_exchange, mailing_card_day, share, back, row_width = 1) 

	return Menu

#==========================================================================================#
# >>>>> –î–ï–ö–û–†–ê–¢–û–†–´ <<<<< #
#==========================================================================================#

class Decorators:
	"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, options: "Options"):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

		:param options: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
		:type options: Options
		"""
		self.__Options = options

	def inline_keyboards(self):
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
	
		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "additional_options")
		def click_additional_options(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–î–æ–ø. –æ–ø—Ü–∏–∏"

			:param Call: additional_options
			:type Call: types.CallbackQuery
			"""

			User = self.__Options.users.auth(Call.from_user)
			if not IsSubscripted(self.__Options.masterbot, User, self.__Options.settings): 
				self.__Options.bot.answer_callback_query(Call.id)
				return
			self.__Options.bot.edit_message_caption(
				caption = "<b>–î–û–ü. –û–ü–¶–ò–ò</b>",
				chat_id = Call.message.chat.id,
				message_id = Call.message.id,
				parse_mode = "HTML",
				reply_markup = keyboard_additional_options()
			)
			self.__Options.bot.answer_callback_query(Call.id)

		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "energy_exchange")
		def click_energy_exchange(Call: types.CallbackQuery):
			"""
			–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–±–º–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–µ–π

			:param Call: energy_exchange
			:type Call: types.CallbackQuery
			"""
			
			OpenExchanger(self.__Options.bot, self.__Options.users.auth(Call.from_user))
			self.__Options.bot.answer_callback_query(Call.id)
			
		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "share")
		def click_share(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"

			:param Call: share
			:type Call: types.CallbackQuery
			"""
			path = self.__Options.settings["qr_image"]
			
			self.__Options.bot.send_photo(
				chat_id = Call.message.chat.id, 
				photo = self.__Options.cacher.get_real_cached_file(path, types.InputMediaPhoto).file_id,
				caption = _('@Taro100_bot\n@Taro100_bot\n@Taro100_bot\n\n<b>–¢–∞—Ä–æ–±–æ—Ç | –†–∞—Å–∫–ª–∞–¥ –æ–Ω–ª–∞–π–Ω | –ö–∞—Ä—Ç–∞ –¥–Ω—è</b>\n–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –±–æ—Ç –¥–ª—è –¢–∞—Ä–æ –≥–∞–¥–∞–Ω–∏–π –≤ Telegram! –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ùì‚ùì‚ùì\n\n<b><i>–ü–æ–ª—å–∑—É–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>'), 
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.AddShare(buttons = ["Share", "Back"])
				)
			self.__Options.bot.answer_callback_query(Call.id)

		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "mailing_card_day")
		def click_back_delete(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è"

			:param Call: mailing_card_day
			:type Call: types.CallbackQuery
			"""

			self.__Options.sender.settings_mailing(Call.message, action = "delete")
			self.__Options.bot.answer_callback_query(Call.id)

class Options:
	"""–†–∞–∑–¥–µ–ª –±–æ—Ç–∞, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"""

	@property
	def decorators(self) -> Decorators:
		"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ """
		return self.__Decorators
	
	@property
	def masterbot(self) -> TeleMaster:
		"""Masterbot"""
		return self.__masterbot
	
	@property
	def bot(self) -> TeleBot:
		"""Telegram bot """

		return self.__masterbot.bot
	
	@property
	def users(self) -> UsersManager:
		"""–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
		return self.__users
	
	@property
	def sender(self) -> WorkpiecesMessages:
		"""–ù–∞–±–æ—Ä Inline-keyboards"""
		return self.__sender
	
	@property
	def settings(self) -> dict:
		"""–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""

		return self.__settings
	
	@property
	def cacher(self) -> TeleCache:
		"""–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
		
		return self.__cacher

	def __init__(self, masterbot: TeleMaster, users: UsersManager, Settings: dict, sender: WorkpiecesMessages, cacher: TeleCache):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è   

		:param MasterBot: Telegram bot
		:type MasterBot: TeleMaster
		:param usermanager: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		:type usermanager: UsersManager
		:param InlineKeyboard: –Ω–∞–±–æ—Ä Inline-keyboards
		:type InlineKeyboard: InlineKeyboards
		:param Settings: —Å–ª–æ–≤–∞—Ä—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
		:type Settings: dict
		:param sender: —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
		:type sender: Sender
		"""

		self.__Decorators = Decorators(self)
		self.__masterbot = masterbot
		self.__users = users
		self.__settings = Settings
		self.__sender = sender
		self.__cacher = cacher
