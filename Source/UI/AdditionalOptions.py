from dublib.TelebotUtils.Users import UsersManager, UserData
from dublib.TelebotUtils.Cache import TeleCache
from dublib.TelebotUtils import TeleMaster
from dublib.Engine.GetText import _

from Source.Modules.Subscription import Subscription
from Source.Modules.EnergyExchange.Options import Options as ExchangeOptions
from Source.InlineKeyboards import InlineKeyboards
from Source.UI.WorkpiecesMessages import WorkpiecesMessages

from telebot import TeleBot, types

#==========================================================================================#
# >>>>> INLINE_KEYBOARD <<<<< #
#==========================================================================================#

class InlineTemplates:
	"""–ù–∞–±–æ—Ä Inline-keyboards."""

	def additional_options(user: UserData) -> types.InlineKeyboardMarkup:
		"""
		Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–π: 

		:return: Inline-keyboard.
		:rtype: types.InlineKeyboardMarkup
		"""

		menu = types.InlineKeyboardMarkup()

		UserOptions = ExchangeOptions(user)
		Notifications = " (" + str(len(UserOptions.mails)) + ")" if UserOptions.mails else ""

		determinations = {
			_("üíü –û–±–º–µ–Ω —ç–Ω–µ—Ä–≥–∏–µ–π") + Notifications: "energy_exchange",
			_("üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"): "share",
			_("üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è"): "mailing_card_day",
			_("ü§ñ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"): "restart_bot",
			_("‚óÄÔ∏è –ù–∞–∑–∞–¥"): "main_menu"
		}

		for string in determinations.keys(): menu.add(types.InlineKeyboardButton(string, callback_data = determinations[string]), row_width = 1)
		return menu

	def restart_bot() -> types.InlineKeyboardMarkup:
		"""
		Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞: 

		:return: Inline-keyboard.
		:rtype: types.InlineKeyboardMarkup
		"""

		menu = types.InlineKeyboardMarkup()

		determinations = {
			_("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å!"): "for_restart",
			_("‚óÄÔ∏è –ù–∞–∑–∞–¥"): "for_delete"
		}

		for string in determinations.keys(): menu.add(types.InlineKeyboardButton(string, callback_data = determinations[string]), row_width = 1)
		return menu

#==========================================================================================#
# >>>>> –î–ï–ö–û–†–ê–¢–û–†–´ <<<<< #
#==========================================================================================#

class Decorators:
	"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, options: "Options"):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

		:param options: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
		:type options: Options
		"""

		self.__Options = options

	def inline_keyboards(self):
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ Callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
	
		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "additional_options")
		def click_additional_options(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–î–æ–ø. –æ–ø—Ü–∏–∏"

			:param Call: additional_options
			:type Call: types.CallbackQuery
			"""

			user = self.__Options.users.auth(Call.from_user)
			if not self.__Options.subscription.IsSubscripted(user):
				self.__Options.bot.answer_callback_query(Call.id)
				return
			Message = self.__Options.bot.edit_message_caption(
				caption = "<b>–î–û–ü. –û–ü–¶–ò–ò</b>",
				chat_id = Call.message.chat.id,
				message_id = Call.message.id,
				parse_mode = "HTML",
				reply_markup = self.__Options.inline_templates.additional_options(user)
			)
			self.__Options.bot.answer_callback_query(Call.id)
			
		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "share")
		def click_share(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"

			:param Call: share
			:type Call: types.CallbackQuery
			"""

			user = self.__Options.users.auth(Call.from_user)
			if not self.__Options.subscription.IsSubscripted(user):
				self.__Options.bot.answer_callback_query(Call.id)
				return
			path = self.__Options.settings["qr_image"]
			
			self.__Options.bot.send_photo(
				chat_id = Call.message.chat.id, 
				photo = self.__Options.cacher.get_real_cached_file(path, types.InputMediaPhoto).file_id,
				caption = _('@Taro100_bot\n@Taro100_bot\n@Taro100_bot\n\n<b>–¢–∞—Ä–æ–±–æ—Ç | –†–∞—Å–∫–ª–∞–¥ –æ–Ω–ª–∞–π–Ω | –ö–∞—Ä—Ç–∞ –¥–Ω—è</b>\n–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±–æ—Ç –¥–ª—è –¢–∞—Ä–æ-–≥–∞–¥–∞–Ω–∏–π –≤ Telegram! –û—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±—ã–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ùì‚ùì‚ùì\n\n<b><i>–ü–æ–ª—å–∑—É–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>'), 
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.AddShare(buttons = ["Share", "Back"])
				)
			self.__Options.bot.answer_callback_query(Call.id)

		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "mailing_card_day")
		def click_back_delete(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è"

			:param Call: mailing_card_day
			:type Call: types.CallbackQuery
			"""
			user = self.__Options.users.auth(Call.from_user)
			if not self.__Options.subscription.IsSubscripted(user):
				self.__Options.bot.answer_callback_query(Call.id)
				return
			self.__Options.sender.settings_mailing(Call.message, action = "delete")
			self.__Options.bot.answer_callback_query(Call.id)

		@self.__Options.bot.callback_query_handler(func = lambda Callback: Callback.data == "restart_bot")
		def click_restart_bot(Call: types.CallbackQuery):
			"""
			–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "ü§ñ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"

			:param Call: mailing_card_day
			:type Call: types.CallbackQuery
			"""

			user = self.__Options.users.auth(Call.from_user)
			if not self.__Options.subscription.IsSubscripted(user):
				self.__Options.bot.answer_callback_query(Call.id)
				return
			Text = (
				("<b><i>" + _("–ï—Å–ª–∏ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å —Ç–∞–∫, —á—Ç–æ –±–æ—Ç –≥–ª—é—á–∏—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –≤–∞–º –æ—Ç–≤–µ—á–∞—Ç—å, —Ç–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –¢–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç, –∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –Ω–µ–∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –Ω–∞—Å –ø—Ä–∏—á–∏–Ω–∞–º!") + "</i></b>"),
				_("–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–ª–∏ —Å–±–æ–∏ –≤ Telegram, –∏–ª–∏ —Å–ª–∞–±–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –µ–≥–æ <u>–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</u> –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:"),
				("1Ô∏è‚É£ ") + _("–í –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –µ—Å—Ç—å —Å–∏–Ω—è—è –∫–Ω–æ–ø–æ—á–∫–∞ \"–ú–µ–Ω—é\". –ú–æ–∂–µ—Ç–µ –Ω–∞ –Ω–µ—ë –Ω–∞–∂–∞—Ç—å –∏ –¥–∞–ª–µ–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ \"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç üöÄ\""),
				("2Ô∏è‚É£ ") + _("–ò–ª–∏ —Å–∞–º–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —Å —á–µ—Ä—Ç–æ—á–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! –í–æ—Ç —Ç–∞–∫: /start"),
				("<i>" + _("–î–∞–ª–µ–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å —á—É—Ç—å-—á—É—Ç—å, –∏ –æ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!") + "</i>"),
				("<b><i>" + _("–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –ø–∞–Ω–∏–∫—É–π—Ç–µ, –≤–µ–¥—å –Ω–∞–º –Ω—É–∂–Ω—ã –≤—Å–µ–≥–¥–∞ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ –∏ –∑–¥–æ—Ä–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ !!!\n–ú—ã –≤–∞–º–∏ –¥–æ—Ä–æ–∂–∏–º! ü•∞" + "</i></b>"))
			   )
			self.__Options.bot.send_animation(
				chat_id = Call.message.chat.id, 
				animation = self.__Options.cacher.get_real_cached_file(
					path = "Data/AdditionalOptions/restart.gif",
					autoupload_type = types.InputMediaAnimation
					).file_id,
				caption = "\n\n".join(Text),
				parse_mode = "HTML",
				reply_markup = self.__Options.inline_templates.restart_bot()
			)
			self.__Options.bot.answer_callback_query(Call.id)

class Options:
	"""–†–∞–∑–¥–µ–ª –±–æ—Ç–∞, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"""

	@property
	def decorators(self) -> Decorators:
		"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ """
		return self.__Decorators
	
	@property
	def masterbot(self) -> TeleMaster:
		"""Masterbot"""
		return self.__masterbot
	
	@property
	def bot(self) -> TeleBot:
		"""Telegram bot """

		return self.__masterbot.bot
	
	@property
	def users(self) -> UsersManager:
		"""–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
		return self.__users
	
	@property
	def sender(self) -> WorkpiecesMessages:
		"""–ù–∞–±–æ—Ä Inline-keyboards"""
		return self.__sender
	
	@property
	def settings(self) -> dict:
		"""–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""

		return self.__settings
	
	@property
	def cacher(self) -> TeleCache:
		"""–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
		
		return self.__cacher
	
	@property
	def subscription(self) -> Subscription:
		"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
		
		return self.__subscription
	
	@property
	def inline_templates(self) -> InlineTemplates:
		"""–ù–∞–±–æ—Ä inline-keyboards."""
		
		return self.__inline_templates
	
	def __init__(self, masterbot: TeleMaster, users: UsersManager, Settings: dict, sender: WorkpiecesMessages, cacher: TeleCache, subscription: Subscription):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è   

		:param MasterBot: Telegram bot
		:type MasterBot: TeleMaster
		:param usermanager: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		:type usermanager: UsersManager
		:param InlineKeyboard: –Ω–∞–±–æ—Ä Inline-keyboards
		:type InlineKeyboard: InlineKeyboards
		:param Settings: —Å–ª–æ–≤–∞—Ä—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
		:type Settings: dict
		:param sender: —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
		:type sender: Sender
		"""

		self.__Decorators = Decorators(self)
		self.__inline_templates = InlineTemplates
		self.__masterbot = masterbot
		self.__users = users
		self.__settings = Settings
		self.__sender = sender
		self.__cacher = cacher
		self.__subscription = subscription
