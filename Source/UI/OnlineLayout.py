from dublib.Engine.GetText import _
from dublib.TelebotUtils.Users import UsersManager
from dublib.TelebotUtils import TeleMaster
from dublib.TelebotUtils.Cache import RealCachedFile

from Source.InlineKeyboards import InlineKeyboards
from Source.Modules.Subscription import Subscription

import random

from telebot import TeleBot, types

#==========================================================================================#
# >>>>> INLINE_KEYBOARDS <<<<< #
#==========================================================================================#

def end_layout() -> types.InlineKeyboardMarkup:
	"""
	–°—Ç—Ä–æ–∏—Ç Inline-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
		–í–∑—è—Ç—å —Ä–∞—Å–∫–ª–∞–¥ —É –ú–∞—Å—Ç–µ—Ä–∞ üî•
		–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–∞—Å–∫–ª–∞–¥!

	:return: keyboard
	:rtype: types.InlineKeyboardMarkup
	"""
	Menu = types.InlineKeyboardMarkup()

	energy_exchange = types.InlineKeyboardButton(_("–í–∑—è—Ç—å —Ä–∞—Å–∫–ª–∞–¥ —É –ú–∞—Å—Ç–µ—Ä–∞ üî•"), callback_data = "send_order_layout")
	mailing_card_day = types.InlineKeyboardButton(_("–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ä–∞—Å–∫–ª–∞–¥!"), callback_data = "send_main_menu")

	Menu.add(energy_exchange, mailing_card_day, row_width= 1) 

	return Menu

#==========================================================================================#
# >>>>> DECORATORS <<<<< #
#==========================================================================================#

class Decorators:
	"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, layout: "Layout"):
		self.__Layout = layout

	def inline_keyboards(self, bot: TeleBot, users: UsersManager, StartAnimation: RealCachedFile):
		"""
		–û–±—Ä–∞–±–æ—Ç–∫–∞ inline_keyboards.

		:param bot: Telegram bot.
		:type bot: TeleBot
		:param users: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		:type users: UsersManager
		:param StartAnimation: –î–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏.
		:type StartAnimation: RealCachedFile
		"""

		@bot.callback_query_handler(func = lambda Callback: Callback.data == "send_main_menu")
		def send_main_menu(Call: types.CallbackQuery):
			user = users.auth(Call.from_user)
			if not self.__Layout.subscription.IsSubscripted(user):
				bot.answer_callback_query(Call.id)
				return
			bot.send_message(
				chat_id = Call.message.chat.id,
				text = self.__Layout.end_phrases()
			)
			bot.send_animation(
				Call.message.chat.id,
				animation = StartAnimation.file_id,
				caption = None,
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.main_menu(user)
				)
			bot.answer_callback_query(Call.id)
			
		@bot.callback_query_handler(func = lambda Callback: Callback.data == "send_order_layout")
		def send_order_layout(Call: types.CallbackQuery):
			User = users.auth(Call.from_user)
			if not self.__Layout.subscription.IsSubscripted(User):
				bot.answer_callback_query(Call.id)
				return
			bot.send_animation(
				chat_id = Call.message.chat.id,
				animation = StartAnimation.file_id,
				caption = "<b>" + _("–†–ê–°–ö–õ–ê–î –£ –ú–ê–°–¢–ï–†–ê") + "</b>",
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.SendOrderLayout()
				)
			bot.answer_callback_query(Call.id)
			
class Layout:
	"""–†–∞—Å–∫–ª–∞–¥ –æ—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏."""

	@property
	def decorators(self) -> Decorators:
		"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Decorators
	
	@property
	def subscription(self) -> Subscription:
		"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""

		return self.__subscription

	def __init__(self, subscription: Subscription):
		"""–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#

		self.__Decorators = Decorators(self)
		self.__subscription = subscription

	def end_phrases(self) -> str:
		"""
		–í—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã –≤ –∫–æ–Ω—Ü–µ —Ä–∞—Å–∫–ª–∞–¥–∞.

		:return: –¢–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã.
		:rtype: str
		"""

		texts = [
			"–í–æ –±–ª–∞–≥–æ!\n–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è!)",
			"–ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ!\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –µ—â—ë —Ä–∞—Å–∫–ª–∞–¥!)",
			"–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!\n–í—ã –Ω–∞—à —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
		   	"–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!)",
			"–í–∞–º —Å–ø–∞—Å–∏–±–æ!\n–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!",
			"–†–∞–¥—ã –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º–∏!\n–ö–æ–≥–¥–∞ –≤—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã - –º—ã –µ—â—ë —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ!)",
			"–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!\n–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞–∑–ª–æ–∂–∏–º –∫–∞—Ä—Ç—ã —Å–Ω–æ–≤–∞!)",
			"–≠—Ç–æ –º—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!)\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
			"–ú—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!\n–£ –≤–∞—Å –¥–æ–≤–æ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!)",
			"–ü—Ä–∏—è—Ç–Ω–æ —Å –≤–∞–º–∏ –∏–º–µ—Ç—å –¥–µ–ª–æ!\n–ò –∑–∞–ø—Ä–æ—Å—ã —É –≤–∞—Å –Ω–µ–æ–±—ã—á–Ω—ã–µ!)"
		]
		text = random.choice(texts)

		return text