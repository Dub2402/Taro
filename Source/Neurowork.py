from Source.Modules.AscendTaro import AscendData, Sender as AscendSender
from Source.Modules.NeuroHub.Connection.API import Requestor, Options
from Source.UI.OnlineLayout import end_layout

from dublib.Methods.Filesystem import ReadJSON, ListDir
from dublib.TelebotUtils import TeleMaster, TeleCache, UserData
from dublib.Engine.GetText import _

from dataclasses import dataclass
import random
import logging

from telebot import types
import telebot

@dataclass(frozen = True)
class SpecificQuestion:
	type: str | None
	reaction: str | None
	main_variant: str | None
	alt_variants: tuple[str] | None

	def print(self):
		print("Type:", self.type)
		print("Reaction:", self.reaction)
		print("Main variant:", self.main_variant)
		print("Alternative variants:", self.alt_variants)

class NeuroRequestor:
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."""

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __FormatCardLayout(self, text: str) -> str | None:
		"""
		–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å —Ä–∞—Å–∫–ª–∞–¥–æ–º.

		:param text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
		:type text: str
		:return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ `None` –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–Ω–æ–≥–æ.
		:rtype: str | None
		"""

		if not text: return
		Replaces = {
			"\n": "\n\n",
			"¬´": "¬´<b>",
			"¬ª": "</b>¬ª"
		}

		for Substring in Replaces.keys(): text = text.replace(Substring, Replaces[Substring])

		return text

	def __FormatPreparation(self, text: str) -> str | None:
		"""
		–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º.

		:param text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
		:type text: str
		:return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ `None` –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–Ω–æ–≥–æ.
		:rtype: str | None
		"""

		if not text: return
		Strings = (
			"–•–æ—Ä–æ—à–∏–π –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å.",
			"–°–ø–∞—Å–∏–±–æ, –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
			"–ù–∏—á–µ–≥–æ —Å–µ–±–µ.",
			"–í–æ—Ç —ç—Ç–æ —Å–∏—Ç—É–∞—Ü–∏—è."
		)

		for String in Strings:
			if String in text: text.replace(String, String[:-1] + "!") 

		return text

	def __ReadCardsData(self) -> dict[str, tuple]:
		"""
		–°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç.

		:return: –°–ª–æ–≤–∞—Ä—å, –∫–ª—é—á—ë–º –≤ –∫–æ—Ç–æ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ.
		:rtype: dict[str, tuple]
		"""

		Data = dict()
		for Set in ListDir("Materials/Layouts"): Data[Set] = tuple(ReadJSON(f"Materials/Layouts/{Set}/cards.json"))

		return Data
	
	def __ParseQuestionData(self, question: str) -> SpecificQuestion:

		alt_variants = list()
		handler = None
		reaction = None
		main_variant = None

		words = question.split(" ")

		for word in words:
			if not word: continue

			if word in ("–∏–ª–∏", "–º–µ–∂–¥—É"):
		
				response: str | None = self.__Generator.generate(self.build_training_request(question)).json["text"]

				if response.count(";"):
					handler = "answer"
					variants = response.strip().split(";")

					for Index in range(len(variants)): variants[Index] = variants[Index].strip()

					if variants: 
						main_variant = random.choice(variants)
						alt_variants = variants
						alt_variants.remove(main_variant)
						alt_variants = tuple(alt_variants)

			elif word == "–ª–∏":
				handler = "reaction"
				reaction = random.choice(("–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É", "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É"))

		if main_variant: reaction = None
					
		return SpecificQuestion(handler, reaction, main_variant, alt_variants)

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, bot: telebot.TeleBot, cacher: TeleCache):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.

		:param bot: –ë–æ—Ç Telegram
		:type bot: telebot.TeleBot
		:param cacher: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ Telegram.
		:type cacher: TeleCache
		"""

		self.__Bot = bot
		self.__Cacher = cacher

		self.__Data: dict[str, tuple] = self.__ReadCardsData()
		self.__MasterBot = TeleMaster(self.__Bot)

		RequestOptions = Options()
		RequestOptions.select_source("gemini")
		RequestOptions.set_model("gemini-2.5-flash")
		RequestOptions.set_max_length(350)
		RequestOptions.set_timeout(30)
		RequestOptions.set_force_proxy(True)

		self.__Generator = Requestor(RequestOptions)

	def send_layout(self, user: UserData, question: str):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

		:param user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type user: UserData
		:param question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
		:type question: str
		"""

		reaction = None

		user.set_property("Generation", True)
		Collection = random.choice(tuple(self.__Data.keys()))

		question_data = self.__ParseQuestionData(question)
		question_data.print()
		if question_data.type == "reaction": reaction = question_data.main_variant
		
		PreparationRequest = self.build_preparation_request(question)
		FirstCardRequest = self.build_card_layout_request(self.__Data[Collection][0], "–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞", question, reaction, question_data.main_variant, question_data.alt_variants)
		SecondCardRequest = self.build_card_layout_request(self.__Data[Collection][1], "–í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞", question, reaction, question_data.main_variant, question_data.alt_variants)
		ThirdCardRequest = self.build_card_layout_request(self.__Data[Collection][2], "–¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞", question, reaction, question_data.main_variant, question_data.alt_variants)
		OutcomeRequest = self.build_outcome_request(self.__Data[Collection][0], self.__Data[Collection][1], self.__Data[Collection][2], question, reaction, question_data.main_variant, question_data.alt_variants)

		RequestsCollection = {
			2: FirstCardRequest,
			3: SecondCardRequest,
			4: ThirdCardRequest
		}

		MessagesID = list()

		for Index in range(1, 5):
			self.__Bot.send_chat_action(user.id, action = "typing")
			ImageCache = self.__Cacher.get_real_cached_file(f"Materials/Layouts/{Collection}/{Index}.jpg", types.InputMediaPhoto)

			if Index == 1:
				Text: str = self.__Generator.generate(PreparationRequest).json["text"]
				if Text: Text = Text.replace("*", "")
				Text = self.__FormatPreparation(Text)

				if Text and Text != "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.": 
					MessagesID.append(self.__Bot.send_photo(
						chat_id = user.id,
						photo = ImageCache.file_id,
						caption = Text,
						parse_mode = "HTML"
					).id)

					logging.info(f"{user.id, Text}")

				else:
					self.__Bot.send_message(
						chat_id = user.id,
						text = _("–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞! ü§ó"),
						parse_mode = "HTML" 
					)
					user.set_property("Generation", False)

					logging.info(f"{user.id}, –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞! ü§ó")
					return

			else:
				Response = self.__Generator.generate(RequestsCollection[Index])
				Text: str | None = Response.json["text"]
				
				if Text: Text = Text.replace("*", "")
				else:
					self.__MasterBot.safely_delete_messages(user.id, MessagesID, complex = True)
					self.__Bot.send_message(
						chat_id = user.id,
						text = "–£—É—É—É–ø—Å, –Ω–µ–±–æ–ª—å—à–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ üò≥\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –¢–∞—Ä–æ–±–æ—Ç—É —á—É—Ç—å –ø–æ–∑–∂–µ!\n\n<i>–ë–æ–Ω—É—Å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –≤–æ–∑–≤—Ä–∞—â—ë–Ω.</i>",
						parse_mode = "HTML" 
					)
					logging.error(Response.json)

				Text = self.__FormatCardLayout(Text)
				MessagesID.append(self.__Bot.send_photo(
					chat_id = user.id,
					photo = ImageCache.file_id,
					caption = Text,
					parse_mode = "HTML" 
				).id)
				logging.info(f"{user.id, Text}")

		Text: str = self.__Generator.generate(OutcomeRequest).json["text"]
		
		if Text: Text = Text.replace("*", "")
		else:
			self.__MasterBot.safely_delete_messages(user.id, MessagesID, complex = True)
			self.__Bot.send_message(
				chat_id = user.id,
				text = "–£—É—É—É–ø—Å, –Ω–µ–±–æ–ª—å—à–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ üò≥\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –¢–∞—Ä–æ–±–æ—Ç—É —á—É—Ç—å –ø–æ–∑–∂–µ!\n\n<i>–ë–æ–Ω—É—Å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –≤–æ–∑–≤—Ä–∞—â—ë–Ω.</i>",
				parse_mode = "HTML" 
			)

		Outcome = (
			"<b><i>" + _("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:") + "</b></i>",
		  	Text + "\n",
		  	"<i>" + _("–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –≤–∑—è—Ç—å —Ä–∞—Å–∫–ª–∞–¥ —É –Ω–∞—à–µ–≥–æ <b>–¢–∞—Ä–æ –ú–∞—Å—Ç–µ—Ä–∞</b>. –≠—Ç–æ –∂–∏–≤–æ–π –∏ –æ–ø—ã—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –≤–∞–º —Å–∞–º—ã–µ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã!") + "</i>"
		)
		MessagesID.append(self.__Bot.send_message(
			chat_id = user.id,
			text = "\n".join(Outcome),
			parse_mode = "HTML",
			reply_markup = end_layout()
		).id)

		logging.info(f"{user.id, "\n".join(Outcome)}")

		user.set_property("Generation", False)
		user.set_expected_type(None)

		ascend = AscendData(user = user)
		if ascend.is_today_layout_available: ascend.incremente_today_layouts()
		else: 
			if ascend.bonus_layouts > 0: ascend.decremente_bonus_layouts()
			if not ascend.is_bonus_layout_available: 
				messages = AscendSender(self.__Bot, self.__Cacher).end_bonus_layout(user.id)
				ascend.add_delete_limiter(messages)

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–°–¢–†–û–ï–ù–ò–Ø –ó–ê–ü–†–û–°–û–í <<<<< #
	#==========================================================================================#
	
	def build_training_request(self, question: str) -> str:
		"""
		–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π.

		:param question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type question: str
		:return: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.
		:rtype: str
		"""

		Request = f"–¢–µ–±–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: {question}."
		Request += "–ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, —Ä–∞–∑–¥–µ–ª—è—è —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ."
		
		return Request
	
	def build_preparation_request(self, question: str) -> str:
		"""
		–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

		:param question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type question: str
		:return: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.
		:rtype: str
		"""

		Starts = (
			_("–ù—É —á—Ç–æ –∂, –¥–∞–≤–∞–π –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ —Ç–∞–π–Ω—ã –¢–∞—Ä–æ..."),
			_("–£—Ö—Ö.. –•–æ—Ä–æ—à–∏–π –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å! –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º..."),
			_("–°–ø–∞—Å–∏–±–æ, –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –°–µ–π—á–∞—Å —Ä–∞–∑–ª–æ–∂–∏–º –∫–∞—Ä—Ç—ã..."),
			_("–ù–∏—á–µ–≥–æ —Å–µ–±–µ! –í–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å –∫ –∫–∞—Ä—Ç–∞–º..."),
			_("–í–æ—Ç —ç—Ç–æ —Å–∏—Ç—É–∞—Ü–∏—è! –î–æ–≤–æ–ª—å–Ω–æ –ª—é–±–æ–ø—ã—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥...")
		)
		Start = random.choice(Starts)
		Request = f"–£ —Ç–µ–±—è –µ—Å—Ç—å —à–∞–±–ª–æ–Ω: {Start} [question]. "
		Request += f"–¢–µ–±–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: \"{question}\". –í—ã–≤–µ–¥–∏ —à–∞–±–ª–æ–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤—å –≤–æ–ø—Ä–æ—Å. –°–æ–≥–ª–∞—Å—É–π –≤–æ–ø—Ä–æ—Å —Å —à–∞–±–ª–æ–Ω–æ–º, –ø–æ—Å—Ç–∞–≤—å –≤–æ –≤—Ç–æ—Ä–æ–µ –ª–∏—Ü–æ, —É—á–∏—Ç—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. "
		Request += "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω —Ç–µ–±–µ, –≤—ã–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É: \"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ.\", –Ω–µ –¥–æ–±–∞–≤–ª—è—è –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ. "
		
		return Request

	def build_card_layout_request(self, card_name: str, card_number: str, question: str, reaction: str | None = None, answer: str | None = None, alt_variants: tuple[str] | None = None) -> str:
		"""
		–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã.

		:param card_name: –ò–º—è –∫–∞—Ä—Ç—ã.
		:type card_name: str
		:param card_number: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.
		:type card_number: str
		:param question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
		:type question: str
		:param reaction: —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏, defaults to None
		:type reaction: str | None, optional
		:return: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.
		:rtype: str
		"""

		Request = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ - \"{card_number}\", —Ç–∏–ø –∫–∞—Ä—Ç—ã - \"{card_name}\", –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - \"{question}\" –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: "
		Request += f"{card_number}, ¬´{card_name}¬ª, [–ø–æ–º–µ—Å—Ç–∏ —Å—é–¥–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ {card_name}]. "

		if answer:
			
			match card_number:

				case "–ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞":
					Request += "–¢–æ–ª—å–∫–æ –æ–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –≤–æ–ø—Ä–æ—à–∞—é—â–µ–≥–æ. "

				case "–í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞": 
					if alt_variants: Request += f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–π, –ø–æ—á–µ–º—É –∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–≤–µ—Ç—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: " + random.choice(alt_variants) + "."
				case "–¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞":
					Request += f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–π, –ø–æ—á–µ–º—É –∫–∞—Ä—Ç–∞ —Å–æ–≤–µ—Ç—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: {answer} "

		if reaction and not answer: Request += f"–°–∫–ª–æ–Ω—è–π—Å—è –∫ {reaction} –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å. "
		Request += "–ù–µ –±–æ–ª–µ–µ 250 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ. –°–¥–µ–ª–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–º."

		return Request
	
	def build_outcome_request(self, first_card: str, second_card: str, third_card: str, question: str, reaction: str | None = None, answer: str | None = None, alt_variants: list[str] | None = None) -> str:
		"""
		–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞.

		:param first_card: –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞.
		:type first_card: str
		:param second_card: –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞.
		:type second_card: str
		:param third_card: –¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞.
		:type third_card: str
		:param question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type question: str
		:param reaction: —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏, defaults to None
		:type reaction: str | None, optional
		:return: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.
		:rtype: str
		"""

		Starts = [
			_("–í —Ü–µ–ª–æ–º"),
			_("–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º"),
			_("–ö–∞–∫ —Ä–∞–∑—É–ª—å—Ç–∞—Ç"),
			_("–í –∏—Ç–æ–≥–µ")
		]

		Start = random.choice(Starts)
		Request = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ: {first_card}, {second_card}, {third_card} –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question}: "
		Request += f"{Start}, [–ø–æ–º–µ—Å—Ç–∏ —Å—é–¥–∞ —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –¢–∞—Ä–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ]. "
		if reaction and not answer: Request += f"–°–∫–ª–æ–Ω—è–π—Å—è –∫ {reaction} –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å. "
		elif answer: Request += f"–°–∫–ª–æ–Ω—è–π –∫ —Ç–∞–∫–æ–º—É –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å \"{answer}\". –î–æ–±–∞–≤—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ—á–µ–º—É —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–π. –°–¥–µ–ª–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–º. "
		Request += "–ù–µ –±–æ–ª–µ–µ 250 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ."
			
		return Request