from dublib.TelebotUtils.Users import UsersManager
from dublib.TelebotUtils import TeleMaster
from dublib.Engine.GetText import _
from dublib.TelebotUtils.Cache import RealCachedFile

from Source.EnergyExchange import OpenExchanger
from Source.InlineKeyboards import InlineKeyboards
from Source.Functions import IsSubscripted
from Source.Bot_addition import send_settings_mailing

from telebot import types

def keyboard_additional_options() -> types.InlineKeyboardMarkup:
	"""
	–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: 
		üíü –û–±–º–µ–Ω —ç–Ω–µ—Ä–≥–∏–µ–π
		üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è
		üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏
		‚óÄÔ∏è –ù–∞–∑–∞–¥

	:return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
	:rtype: types.InlineKeyboardMarkup
	"""
	Menu = types.InlineKeyboardMarkup()

	energy_exchange = types.InlineKeyboardButton(_("üíü –û–±–º–µ–Ω —ç–Ω–µ—Ä–≥–∏–µ–π"), callback_data = "energy_exchange")
	mailing_card_day = types.InlineKeyboardButton(_("üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è"), callback_data = "mailing_card_day")
	share = types.InlineKeyboardButton(_("üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"), callback_data = "share")
	back = types.InlineKeyboardButton(_("‚óÄÔ∏è –ù–∞–∑–∞–¥"), callback_data = "Back_SendMainMenu")

	Menu.add(energy_exchange, mailing_card_day, share, back, row_width= 1) 

	return Menu

#==========================================================================================#
# >>>>> –î–ï–ö–û–†–ê–¢–û–†–´ <<<<< #
#==========================================================================================#

def decorators_additional_options(master_bot: TeleMaster, users: UsersManager, inline_keyboard: InlineKeyboards, Settings: dict, QrImage: RealCachedFile):
	"""
	–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø. –æ–ø—Ü–∏–π

	:param MasterBot: –±–æ—Ç Telegram
	:type MasterBot: TeleMaster
	:param users: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	:type users: UsersManager
	:param inline_keyboard: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ 
	:type inline_keyboard: InlineKeyboards
	:param Settings: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ 
	:type Settings: dict
	:param QrImage: qr-code.jpg
	:type QrImage: RealCachedFile
	"""
	
	@master_bot.bot.callback_query_handler(func = lambda Callback: Callback.data == "additional_options")
	def click_additional_options(Call: types.CallbackQuery):
		"""
		–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–î–æ–ø. –æ–ø—Ü–∏–∏"

		:param Call: additional_options
		:type Call: types.CallbackQuery
		"""
		User = users.auth(Call.from_user)
		if not IsSubscripted(master_bot, User, Settings, inline_keyboard): 
			master_bot.bot.answer_callback_query(Call.id)
			return
		master_bot.bot.edit_message_caption(
			caption = "<b>–î–û–ü. –û–ü–¶–ò–ò</b>",
			chat_id = Call.message.chat.id,
			message_id = Call.message.id,
			parse_mode = "HTML",
			reply_markup = keyboard_additional_options()
		)
		master_bot.bot.answer_callback_query(Call.id)

	@master_bot.bot.callback_query_handler(func = lambda Callback: Callback.data == "energy_exchange")
	def click_energy_exchange(Call: types.CallbackQuery):
		"""
		–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–±–º–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏–µ–π

		:param Call: energy_exchange
		:type Call: types.CallbackQuery
		"""
		if not IsSubscripted(master_bot, users.auth(Call.from_user), Settings, inline_keyboard): 
			master_bot.bot.answer_callback_query(Call.id)
			return
		
		OpenExchanger(master_bot.bot, users.auth(Call.from_user))
		master_bot.bot.answer_callback_query(Call.id)
		
	@master_bot.bot.callback_query_handler(func = lambda Callback: Callback.data == "share")
	def click_share(Call: types.CallbackQuery):
		"""
		–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"

		:param Call: share
		:type Call: types.CallbackQuery
		"""
		if not IsSubscripted(master_bot, users.auth(Call.from_user), Settings, inline_keyboard): 
			master_bot.bot.answer_callback_query(Call.id)
			return
		master_bot.bot.send_photo(
			chat_id = Call.message.chat.id, 
			photo = QrImage.file_id,
			caption = _('@Taro100_bot\n@Taro100_bot\n@Taro100_bot\n\n<b>–¢–∞—Ä–æ–±–æ—Ç | –†–∞—Å–∫–ª–∞–¥ –æ–Ω–ª–∞–π–Ω | –ö–∞—Ä—Ç–∞ –¥–Ω—è</b>\n–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ùì‚ùì‚ùì\n\n<b><i>–ü–æ–ª—å–∑—É–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>'), 
			parse_mode = "HTML",
			reply_markup = inline_keyboard.AddShare(buttons = ["Share", "Back"])
			)
		master_bot.bot.answer_callback_query(Call.id)

	@master_bot.bot.callback_query_handler(func = lambda Callback: Callback.data == "back_delete")
	def click_back_delete(Call: types.CallbackQuery):
		"""
		–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "‚óÄÔ∏è –ù–∞–∑–∞–¥"

		:param Call: back_delete
		:type Call: types.CallbackQuery
		"""
		if not IsSubscripted(master_bot,  users.auth(Call.from_user), Settings, inline_keyboard): 
			master_bot.bot.answer_callback_query(Call.id)
			return
		master_bot.bot.delete_message(Call.message.chat.id, Call.message.id)
		master_bot.bot.answer_callback_query(Call.id)

	@master_bot.bot.callback_query_handler(func = lambda Callback: Callback.data == "mailing_card_day")
	def click_back_delete(Call: types.CallbackQuery):
		"""
		–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "üì≤ –†–∞—Å—Å—ã–ª–∫–∞ –ö–∞—Ä—Ç—ã –¥–Ω—è"

		:param Call: mailing_card_day
		:type Call: types.CallbackQuery
		"""
		if not IsSubscripted(master_bot, users.auth(Call.from_user), Settings, inline_keyboard): 
			master_bot.bot.answer_callback_query(Call.id)
			return
		send_settings_mailing(master_bot.bot, Call.message, inline_keyboard)
		master_bot.bot.answer_callback_query(Call.id)