from dublib.Methods.Filesystem import ReadJSON, WriteJSON
from dublib.TelebotUtils.Users import UsersManager
from dublib.TelebotUtils.Master import TeleMaster
from dublib.TelebotUtils.Cache import TeleCache
from dublib.Engine.GetText import _

from Source.InlineKeyboards import InlineKeyboards
from Source.Modules.Subscription import Subscription
from Source.Core.Reader import Reader

from time import sleep
from telebot import TeleBot, types

import random

#==========================================================================================#
# >>>>> –ù–ê–ë–û–† INLINE_KEYBOARDS <<<<< #
#==========================================================================================#

class YesNoInlineTemplates:
	"""–ù–∞–±–æ—Ä Inline-keyboards"""

	def OpenCard() -> types.InlineKeyboardMarkup:
		"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã."""
		return types.InlineKeyboardMarkup([[types.InlineKeyboardButton(_("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É"), callback_data = "open_card")]])
	
#==========================================================================================#
# >>>>> DECORATORS <<<<< #
#==========================================================================================#

class Decorators:
	"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, yes_no: "YesNo"):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.

		:param yes_no: –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å.
		:type yes_no: YesNo
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#

		self.__YesNo = yes_no

	def inline_keyboards(self):
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ inline_keyboards."""

		@self.__YesNo.bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("yes_no"))
		def yes_no(Call: types.CallbackQuery):
			user = self.__YesNo.users.auth(Call.from_user)
			if not self.__YesNo.subscription.IsSubscripted(user): 
				self.__YesNo.bot.answer_callback_query(Call.id)
				return
			
			self.__YesNo.bot.send_message(
				Call.message.chat.id, 
				text = _("–ó–∞–≥–∞–¥–∞–π —Å–∏—Ç—É–∞—Ü–∏—é, –≥–¥–µ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>–î–∞</b> –∏–ª–∏ <b>–ù–µ—Ç</b>.\n\n–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ \"–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É\""), 
				reply_markup = YesNoInlineTemplates.OpenCard(),
				parse_mode = "HTML")
			
			self.__YesNo.bot.answer_callback_query(Call.id)

		@self.__YesNo.bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("open_card"))
		def InlineButtonCardDay(Call: types.CallbackQuery):
			user = self.__YesNo.users.auth(Call.from_user)
			if not self.__YesNo.subscription.IsSubscripted(user): 
				self.__YesNo.bot.answer_callback_query(Call.id)
				return
			
			self.__YesNo.masterbot.safely_delete_messages(
				Call.message.chat.id,
				Call.message.id
			)

			stiker_message = self.__YesNo.bot.send_message(
				chat_id = Call.message.chat.id, 
				text = "üîÆ"
				)
			sleep(2.5)

			self.__YesNo.masterbot.safely_delete_messages(
				Call.message.chat.id,
				stiker_message.id
			)
			
			image, choice_type = self.__YesNo.ChoiceRandomCard()
			if choice_type == "Straight":
				cards = self.__YesNo.reader.StraightCard
				values = self.__YesNo.reader.StraightValues

			if choice_type == "Reversed":
				cards = self.__YesNo.reader.ReversedCard
				values = self.__YesNo.reader.ReversedValues
			
			card, value = self.__YesNo.Get_Text(image, cards, values)
			PhotoID = self.__YesNo.cacher.get_real_cached_file(image, types.InputMediaPhoto)

			self.__YesNo.bot.send_photo(
				Call.message.chat.id, 
				photo = PhotoID.file_id,
				caption = f"<b>{card}</b>\n\n–í–∞—à –æ—Ç–≤–µ—Ç: <b>{value}</b>",
				reply_markup = InlineKeyboards.for_delete("–ë–ª–∞–≥–æ–¥–∞—Ä—é!"),
				parse_mode = "HTML")
			
			self.__YesNo.bot.answer_callback_query(Call.id)

#==========================================================================================#
# >>>>> –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° <<<<< #
#==========================================================================================#

class YesNo:
	"""–ú–æ–¥—É–ª—å –¥–∞/–Ω–µ—Ç."""

	@property
	def decorators(self) -> Decorators:
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Decorators
	
	@property
	def masterbot(self) -> TeleMaster:
		"""Telegram bot."""

		return self.__masterbot
	
	@property
	def bot(self) -> TeleBot:
		"""Telegram bot."""

		return self.__masterbot.bot
	
	@property
	def cacher(self) -> TeleCache:
		"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞."""

		return self.__cacher
	
	@property
	def reader(self) -> Reader:
		"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞."""

		return self.__reader
	
	@property
	def users(self) -> UsersManager:
		"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞."""

		return self.__users
	
	@property
	def subscription(self) -> Subscription:
		"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""

		return self.__subscription
	
	def __init__(self, masterbot: TeleMaster, cacher: TeleCache, reader: Reader, users: UsersManager, subscription: Subscription) -> None:
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

		:param Bot: Telegram bot.
		:type Bot: TeleBot
		:param Cacher: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
		:type Cacher: TeleCache
		"""

		self.__masterbot = masterbot
		self.__cacher = cacher
		self.__reader = reader
		self.__users = users
		self.__subscription = subscription
		
		self.__Decorators = Decorators(self)
					
	def ChoiceRandomCard(self) -> str:
		"""
		–í—ã–±–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç—ã (—Ç–∏–ø –∏ –Ω–æ–º–µ—Ä). 

		:return: —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∞, —Ç–∏–ø –∫–∞—Ä—Ç—ã.
		:rtype: str
		"""

		image = None
		choice_type = random.choice(["Straight", "Reversed"])
		choice_card = random.randint(1, 78) 
		image = f"Materials/{choice_type}/{choice_card}.jpg"

		return image, choice_type
	
	def Get_Text(self, photo: str, cards: list, values: list) -> str:
		"""
		_summary_

		:param photo: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã.
		:type photo: str
		:param cards: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ä—Ç.
		:type cards: list
		:param values: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞—Ä—Ç.
		:type values: list
		:return: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ä—Ç—ã.
		:rtype: str
		"""

		index = int(photo.split("/")[-1].replace(".jpg", "")) - 1
		card = cards[index]
		value = values[index]

		return card, value
