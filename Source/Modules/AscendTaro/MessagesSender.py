from dublib.TelebotUtils.Cache import TeleCache
from dublib.Methods.Filesystem import ListDir
from dublib.Engine.GetText import _

from telebot import TeleBot, types

import logging
import random
from os import PathLike

class InlineTemplates:
	"""Inline-keyboards –¥–ª—è –º–æ–¥—É–ª—è AscendTaro"""

	def delete_message(text: str) -> types.InlineKeyboardMarkup:
		"""
		–°—Ç—Ä–æ–∏—Ç Inline-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

		:param text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–ø–∫–∏.
		:type text: str
		:return: inline-keyboard
		:rtype: types.InlineKeyboardMarkup
		"""

		Menu = types.InlineKeyboardMarkup()

		for_delete = types.InlineKeyboardButton(text, callback_data = "for_delete")

		Menu.add(for_delete, row_width = 1) 

		return Menu

class Sender:
	"""–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π."""

	def __init__(self, bot: TeleBot, cacher: TeleCache) -> None:
		"""
		–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π.

		:param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
		:type bot: TeleBot
		:param cacher: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
		:type cacher: TeleCache
		"""

		self.__bot = bot
		self.__cacher = cacher

	@property
	def bot(self) -> str:
		"""Telegram Bot"""

		return self.__bot
	
	def __randomize_animation(self, path_to_animations: PathLike) -> str:
		"""
		–í—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –ø–∞–ø–∫–∏.

		:param path_to_animations: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≥–∏—Ñ–∫–∞–º–∏.
		:type path_to_animations: PathLike
		:return: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –≥–∏—Ñ–∫–∏.
		:rtype: str
		"""
		
		animation_paths = list()

		for animation_path in ListDir(path_to_animations):
			animation_paths.append(animation_path)

		name_animation = random.choice(animation_paths)

		return name_animation
	
	def __message_with_referal(self, chat_id: types.Message, text: str) -> None:
		name_animation = self.__randomize_animation("Data/AscendTarobot/Materials/Join")

		self.__bot.send_animation(
			chat_id = chat_id,
			animation = self.__cacher.get_real_cached_file(
				path = f"Data/AscendTarobot/Materials/Join/{name_animation}",
				autoupload_type = types.InputMediaAnimation,
				).file_id,
			caption = "<b>" + _("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¢–∞—Ä–æ–±–æ—Ç—É, —è —É–∂–µ —Ç–∞–º:") + "</b>\n\n" + self.generate_referal_link(id = chat_id),
			parse_mode = "HTML",
			reply_markup = InlineTemplates.delete_message(_("–°–ø–∞—Å–∏–±–æ, –¥—Ä—É–∑—å—è —É–∂–µ –≤ –∫—É—Ä—Å–µ!"))
		)

	def generate_referal_link(self, id: int) -> str:
		"""–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞."""

		return "https://t.me/" + self.__bot.get_me().username + "?start=" + str(id)

	def limiter_layouts(self, chat_id: types.Message) -> None:
		"""–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± o–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å."""

		logging.info("–í—ã–∑–≤–∞–Ω limiter_layouts.")
		
		text = (
				"<b>" + _("–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") + "!</b>\n",
				_("–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å 1 –û–Ω–ª–∞–π–Ω —Ä–∞—Å–∫–ª–∞–¥ –≤ –¥–µ–Ω—å" + "! üéÅ" + " " + "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –¢–∞—Ä–æ–±–æ—Ç—É" + "!\n"),
				"<b>" + _("–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é:") + "</b>"
				)
		
		self.__bot.send_animation(
			chat_id = chat_id,
			animation = self.__cacher.get_real_cached_file(
				path = "Data/AscendTarobot/Materials/limiter.gif",
				autoupload_type = types.InputMediaAnimation,
				).file_id,
			caption = "\n".join(text), 
			parse_mode = "HTML"
		)
		self.__message_with_referal(chat_id = chat_id, text = "<b>" + _("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¢–∞—Ä–æ–±–æ—Ç—É, —è —É–∂–µ —Ç–∞–º:") + "</b>\n\n")
		
	def worked_referal(self, user_id: int) -> None:
		text = (
				"<b>" + _("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!! –û—Ç –≤–∞—Å –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!") + "</b>\n",
				"üåü" + _("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ —ç—Ç–æ –±–æ–Ω—É—Å:"),
				_("5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –û–Ω–ª–∞–π–Ω —Ä–∞—Å–∫–ª–∞–¥–æ–≤!") + "\n",
				"<b>" + _("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –¢–∞—Ä–æ–±–æ—Ç–∞!") + "</b>"
				)
		
		self.__bot.send_animation(
			chat_id = user_id,
			animation = self.__cacher.get_real_cached_file(
				path = "Data/AscendTarobot/Materials/level_up.gif",
				autoupload_type = types.InputMediaAnimation,
				).file_id,
			caption = "\n".join(text), 
			parse_mode = "HTML",
			reply_markup = InlineTemplates.delete_message(_("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—è—Ç–Ω–æ!"))
		)

	def end_bonus_layout(self, user_id):
		text = (
				"<b>" + _("–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!") + " " + "ü§ó" + "</b>" + "\n",
				_("–í–∞—à –ª–∏–º–∏—Ç –±–æ–Ω—É—Å–Ω—ã—Ö –û–Ω–ª–∞–π–Ω —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É!") + "\n",
				_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞!") + "\n",
				"<b>" + _("–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:") + "</b>"
				)
		
		self.__bot.send_message(
			chat_id = user_id,
			text = "\n".join(text), 
			parse_mode = "HTML"
		)

		self.__message_with_referal(chat_id = user_id, text = "<b>" + _("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¢–∞—Ä–æ–±–æ—Ç—É, —è —É–∂–µ —Ç–∞–º:") + "</b>\n\n")