from dublib.TelebotUtils.Cache import TeleCache
from dublib.Methods.Filesystem import ListDir
from dublib.Engine.GetText import _

from telebot import TeleBot, types

import logging
import random


def start_appeals() -> types.InlineKeyboardMarkup:
		"""
		–°—Ç—Ä–æ–∏—Ç Inline-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
			–ü–æ–¥–µ–ª–∏—Ç—å—Å—è
			–í –¥—Ä—É–≥–æ–π —Ä–∞–∑!

		:return: inline-keyboard
		:rtype: types.InlineKeyboardMarkup
		"""

		Menu = types.InlineKeyboardMarkup()

		for_delete = types.InlineKeyboardButton(_("–°–ø–∞—Å–∏–±–æ, –¥—Ä—É–∑—å—è —É–∂–µ –≤ –∫—É—Ä—Å–µ!"), callback_data = "for_delete")

		Menu.add(for_delete, row_width = 1) 

		return Menu

class Sender:
	"""–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π."""

	def __init__(self, bot: TeleBot, cacher: TeleCache) -> None:
		"""
		–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π.

		:param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
		:type bot: TeleBot
		:param cacher: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
		:type cacher: TeleCache
		"""

		self.__bot = bot
		self.__cacher = cacher

	@property
	def bot(self) -> str:
		"""Telegram Bot"""

		return self.__bot
	
	def __generate_referal_link(self, id: int) -> str:
		"""–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞."""

		return "https://t.me/" + self.__bot.get_me().username + "?start=" + str(id)
	
	def __generate_join_animation(self) -> str:
		"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
		
		animation_paths = list()

		for animation_path in ListDir("Data/AscendTarobot/Materials/Join"):
			animation_paths.append(animation_path)

		animation = random.choice(animation_paths)

		return animation

	def limiter_layouts(self, message: types.Message) -> None:
		"""–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± o–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å."""

		logging.info("–í—ã–∑–≤–∞–Ω limiter_layouts.")
		
		text = (
				"<b>" + _("–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") + "!</b>\n",
				_("–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å 1 –û–Ω–ª–∞–π–Ω —Ä–∞—Å–∫–ª–∞–¥ –≤ –¥–µ–Ω—å" + "! üéÅ" + "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –¢–∞—Ä–æ–±–æ—Ç—É" + "!\n"),
				"<b>" + _("–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é:") + "</b>"
				)
		self.__bot.send_animation(
			chat_id = message.chat.id,
			animation = self.__cacher.get_real_cached_file(
				path = "Data/AscendTarobot/Materials/limiter.gif",
				autoupload_type = types.InputMediaAnimation,
				).file_id,
			caption = "\n".join(text), 
			parse_mode = "HTML"
		)

		path = self.__generate_join_animation()

		self.__bot.send_animation(
			chat_id = message.chat.id,
			animation = self.__cacher.get_real_cached_file(
				path = f"Data/AscendTarobot/Materials/Join/{path}",
				autoupload_type = types.InputMediaAnimation,
				).file_id,
			caption = "<b>" + _("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¢–∞—Ä–æ–±–æ—Ç—É, —è —É–∂–µ —Ç–∞–º:") + "</b>\n\n" + self.__generate_referal_link(message.chat.id),
			parse_mode = "HTML",
			reply_markup = start_appeals()
		)