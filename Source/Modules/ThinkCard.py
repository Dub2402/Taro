from dublib.TelebotUtils import UserData, UsersManager
from dublib.TelebotUtils.Master import TeleMaster
from dublib.TelebotUtils.Cache import TeleCache
from dublib.Methods.Data import ToIterable
from dublib.Engine.GetText import _

from Source.InlineKeyboards import InlineKeyboards

from telebot import TeleBot, types

from types import MappingProxyType
from datetime import datetime
from os import PathLike
from typing import Literal, Any, Iterable, TYPE_CHECKING
import logging
import os

if TYPE_CHECKING:
	from Source.Modules.Subscription import Subscription

ThinkCardParameters = MappingProxyType(
	{
	"messages": [],
	"number": None,
	}
)

def update_think_card(usermanager: UsersManager):
	"""
	–°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã

	:param usermanager: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞
	:type usermanager: UsersManager
	"""
	for User in usermanager.users:
		try:
			if User.has_property("ThinkCard"):
				ThinkCard = User.get_property("ThinkCard")
				ThinkCard["number"] = None
				User.set_property("ThinkCard", ThinkCard)
		except:
			logging.info(User.id, "–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç–æ–π –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")

class Data:

	@property
	def number_card(self):
		"""–ù–æ–º–µ—Ä –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã."""
		
		return self.__Data["number"]
	
	@property
	def messages(self):
		"""–°–æ—Ö—Ä–∞–Ω–Ω—ë–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–¥—É–ª—è –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É."""
		
		return self.__Data["messages"]

	def __ValidateDate(self) -> dict[str, Any]:
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

		:return: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:rtype: dict[str, Any]
		"""
		
		if not self.__User.has_property("ThinkCard"):
			self.__User.set_property("ThinkCard", ThinkCardParameters.copy())
			
		else:
			Data: dict = self.__User.get_property("ThinkCard")

			for Key in ThinkCardParameters.keys():

				if Key not in Data.keys():
					Data[Key] = ThinkCardParameters[Key]
					logging.debug(f"For user #{self.__User.id} key \"{Key}\" set to default.")

			self.__User.set_property("ThinkCard", Data)

		return self.__User.get_property("ThinkCard")

	def __init__(self, user: UserData):
		"""
		–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

		:param user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type user: UserData
		"""

		self.__User = user
	
		self.__Data = self.__ValidateDate()

	def __SetParameter(self, key: Literal["day", "messages", "number"], value: Any):
		"""
		–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

		:param key: –ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
		:type key: Literal["day", "messages", "number"]
		:param value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
		:type value: Any
		"""

		self.__Data[key] = value

		self.save()

	def save(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

		self.__User.set_property("ThinkCard", self.__Data)

	def set_number_card(self, number_card: int):
		"""
		–ü–µ—Ä–µ–¥–∞—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None.

		:param number_card: –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.
		:type number_card: int
		"""

		if self.number_card == None:self.__SetParameter("number", number_card)
	
	def add_messages(self, message_id: Iterable[int] | int):
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç id —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å.

		:param message_id: –î–æ–±–∞–≤–ª—è–µ—Ç id —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å.
		:type message_id: Iterable[int] | int
		"""

		MessagesID: list = self.messages 
		MessagesID.extend(ToIterable(message_id))
		self.__SetParameter("messages", MessagesID)

	def zeroing_messages(self):
		"""–û–±–Ω—É–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –º–æ–¥—É–ª—é –∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É."""

		self.__SetParameter("messages", [])
	
class Manager:

	@property
	def day_of_week(self):
		"""–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏."""

		return datetime.now().weekday()
	
	@property
	def date(self):
		"""–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ."""

		return datetime.now().strftime("%d.%m.%Y")
	
	
	def __FindNearest(self, today: str)-> PathLike:
		"""
		–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π –¥–∞—Ç—ã –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é.

		:param today: —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 22.05.2025
		:type today: str
		:return: —Å–∞–º–∞—è –±–ª–∏–∑–∫–∞—è –¥–∞—Ç–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é –≤ –ø—Ä–æ—à–ª–æ–º (21.05 –∏–ª–∏ 22.05, –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ)
		:rtype: PathLike
		"""

		directory_path = "Materials/ChoiceCard/"
		dates = os.listdir(directory_path)
		today_datetime = datetime.strptime(today, "%d.%m.%Y")
		past_dates = []
		
		for date in dates:
			try:
				dir_datetime = datetime.strptime(date, "%d.%m.%Y")
				if dir_datetime < today_datetime:
					past_dates.append(dir_datetime)
			except ValueError:
				continue
		
		closest_past_date: datetime = max(past_dates) if past_dates else None
		
		return closest_past_date.strftime("%d.%m.%Y") if closest_past_date else None
	
	def needed_folder(self) -> PathLike:
		"""
		–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. 

		:return: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.
		:rtype: PathLike
		"""

		today_date = datetime.now().strftime("%d.%m.%Y")
		path = f"Materials/ChoiceCard/{today_date}"
		
		if not os.path.exists(path):
			today_date = self.__FindNearest(today_date)
			path = f"Materials/ChoiceCard/{today_date}"

		return path
	
class Sender:

	@property
	def bot(self):
		"""Telegram bot."""

		return self.__bot
	
	@property
	def cacher(self):
		"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞."""

		return self.__cacher

	def __init__(self, bot: TeleBot, cacher: TeleCache):
		"""–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–¥–∞—á –∫ —Ä–∞–±–æ—Ç–µ."""

		self.__bot = bot
		self.__cacher = cacher
	
	def needed_message(self, path: PathLike, User: UserData, number_card: int, adding: str = "", inline: InlineKeyboards = None) -> types.Message:
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

		:param path: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.
		:type path: PathLike
		:param User: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type User: UserData
		:param number_card: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.
		:type number_card: int
		:param adding: –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, defaults to ""
		:type adding: str, optional
		:param inline: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—Ä—É—ã, defaults to None
		:type inline: InlineKeyboards, optional
		:return: –æ—Ç–ø—Ä–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		:rtype: types.Message
		"""
		
		with open(path + f"/{number_card}.txt") as file:
			Text = file.read()

		introdution_message = self.bot.send_photo(
			chat_id = User.id,
			photo = self.cacher.get_real_cached_file(
				path + f"/{number_card}.jpg", 
				types.InputMediaPhoto
				).file_id,
			caption = Text + adding,
			reply_markup = inline,
			parse_mode = "HTML"
		)

		return introdution_message

class InlineKeyboard:

	def about() -> types.InlineKeyboardMarkup:
		"""
		–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ –º–æ–¥—É–ª—é "–∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É".

		:return: inline-keyboard
		:rtype: types.InlineKeyboardMarkup
		"""

		menu = types.InlineKeyboardMarkup()

		determinations = {
			_("–û \"–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É\""): "about_think_card",
			_("–ë–ª–∞–≥–æ–¥–∞—Ä—é!"): "delete_before_mm",
		}

		for string in determinations.keys(): menu.add(types.InlineKeyboardButton(string, callback_data = determinations[string]), row_width = 1)

		return menu
	
	def delete_about_think_card() -> types.InlineKeyboardMarkup:
		"""
		–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫ —Ç–µ–∫—Å—Ç—É "–û –ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É".

		:return: inline-keyboard
		:rtype: types.InlineKeyboardMarkup
		"""

		menu = types.InlineKeyboardMarkup()

		determinations = {
			_("‚óÄÔ∏è –ù–∞–∑–∞–¥"): "for_delete",
			_("–ë–ª–∞–≥–æ–¥–∞—Ä—é!"): "delete_before_mm",
		}

		for string in determinations.keys(): menu.add(types.InlineKeyboardButton(string, callback_data = determinations[string]), row_width = 1)

		return menu
	
class Decorators:
	"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, main_think: "Main"):

		self.__main_think = main_think

		
	def inline_keyboards(self):
		"""
		–û–±—Ä–∞–±–æ—Ç–∫–∞ inline_keyboards.
		"""

		@self.__main_think.bot.callback_query_handler(func = lambda Callback: Callback.data == "about_think_card")
		def about_think_card(Call: types.CallbackQuery):
			user = self.__main_think.users.auth(Call.from_user)
			if not self.__main_think.subscription.IsSubscripted(user):
				self.__main_think.bot.answer_callback_query(Call.id)
				return
			
			day_of_week = Manager().day_of_week

			if day_of_week in (0, 1): name_day_of_week = "—Å—Ä–µ–¥—É! üíñ"
			if day_of_week in (2, 3): name_day_of_week = "–ø—è—Ç–Ω–∏—Ü—É! üíó"
			if day_of_week in (4, 5, 6): name_day_of_week = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫! üíû"

			text = (
			"<b>" + _("–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É") + "</b>" + " - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä—É–±—Ä–∏–∫–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é, —Å–∞–º –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É." + "\n",
			_("–ö–∞–∂–¥—ã–π ") + "<b>" + _("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥—É –∏ –ø—è—Ç–Ω–∏—Ü—É ") + "</b>"+ "–Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç –¥–ª—è –≤–∞—Å —ç—Ç—É —Ä—É–±—Ä–∏–∫—É –∏ —Å—Ç–∞—Ä–∞—é—Ç—Å—è –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã. –ù–∞—à–∞ —Ü–µ–ª—å: —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –¥–æ—Å—É–≥ —Å –¢–∞—Ä–æ–±–æ—Ç–æ–º –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ)"+ "\n",
			_("–ñ–¥—ë–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –≤ ")+ "<b>" + name_day_of_week + "</b>")

			about_message = self.__main_think.bot.send_message(
				Call.message.chat.id, 
				text = "\n".join(text) ,
				reply_markup = InlineKeyboard.delete_about_think_card(),
				parse_mode = "HTML"
			)

			Data(user = user).add_messages(about_message.id)
			self.__main_think.bot.answer_callback_query(Call.id)

		@self.__main_think.bot.callback_query_handler(func = lambda Callback: Callback.data == "delete_before_mm")
		def delete_before_mm(Call: types.CallbackQuery):
			user = self.__main_think.users.auth(Call.from_user)
			if not self.__main_think.subscription.IsSubscripted(user):
				self.__main_think.bot.answer_callback_query(Call.id)
				return
			
			data = Data(user = user)
			TeleMaster(self.__main_think.bot).safely_delete_messages(Call.message.chat.id, data.messages)
			data.zeroing_messages()

			self.__main_think.bot.answer_callback_query(Call.id)

class Main:

	@property
	def users(self):
		"""–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
		return self.__users
	
	@property
	def bot(self):
		"""Telegram bot."""

		return self.__bot

	@property
	def cacher(self):
		"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞."""

		return self.__cacher

	@property
	def subscription(self):
		"""–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏."""

		return self.__subscription
	
	@property
	def decorators(self):
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Decorators
	
	@property
	def sender(self):
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Sender

	def __init__(self, users: UsersManager, bot: TeleBot, cacher: TeleCache, subscription: "Subscription"):

		self.__users = users
		self.__cacher = cacher
		self.__bot = bot
		self.__subscription = subscription

		self.__Decorators = Decorators(self)
		self.__Sender = Sender(self.__bot, self.__cacher)
