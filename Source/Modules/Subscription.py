from Source.UI.WorkpiecesMessages import WorkpiecesMessages

from dublib.TelebotUtils.Cache import TeleCache
from dublib.TelebotUtils.Users import UserData, UsersManager
from dublib.TelebotUtils import TeleMaster
from dublib.Engine.GetText import _

from Source.InlineKeyboards import InlineKeyboards as MainInlineKeyboards
from Source.Modules.AscendTaro import AscendData
from Source.Modules.AscendTaro import Sender

from telebot import types

class InlineKeyboards:
	"""–ù–∞–±–æ—Ä inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

	def subscribtion() -> types.InlineKeyboardMarkup:
		menu = types.InlineKeyboardMarkup()

		determinations = {
			_("–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥üåô"): "https://t.me/+ns_u9dpjys1jMjFi",
			_("–ü–æ—Å–ª–∞–Ω–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–πüîÜ"): "https://t.me/+9U9SMzbOwY1iNzFi"
		}
		menu.add(*[types.InlineKeyboardButton(text = name, url = link) for name, link in determinations.items()], row_width = 1)
		menu.add(types.InlineKeyboardButton(_("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!"), callback_data="Subscribe"))

		return menu

class Subscription:
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""

	def __send_requirements(self, User: UserData):
		"""
		–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã.

		:param User: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type User: UserData
		"""
		
		Text = (
			("<b><i>" + _("–î—Ä—É–∑—å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ 2 –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞! üíî") + "</i></b>"),
			_("–ö–∞–∫ –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!\"")
		)
		
		Message = self.__masterbot.bot.send_message(
			chat_id = User.id, 
			text = "\n\n".join(Text), 
			parse_mode = "HTML",
			disable_web_page_preview = True,
			reply_markup = InlineKeyboards.subscribtion()
		)

		User.set_property("Subscription", Message.id)

	def __send_tarofamily_message(self, User: UserData):

		action = "–í–û–ó–í–†–ê–©–ï–ù–ò–ï–ú" if User.get_property("was_channels_member") else "–ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï–ú"

		Text = (
			("<b>" + "ü§ó " + _("–° $action –≤ –Ω–∞—à—É –±–æ–ª—å—à—É—é —Å–µ–º—å—é –¢–∞—Ä–æ!") + "</b>"),
			_("–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞ –∏ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—É—Å—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –≤ –º–∏—Ä –∑–∞–≥–∞–¥–æ–∫ –∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–π –∏ —Å–∫—Ä–∞—Å–∏—Ç —Ç–≤–æ–π –¥–æ—Å—É–≥ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"),
			"<b>" + _("–° –ª—é–±–æ–≤—å—é, –ì–∞–ª–∏–Ω–∞ –¢–∞—Ä–æ –ú–∞—Å—Ç–µ—Ä!") + "</b>"
		)
		
		self.__masterbot.bot.send_animation(
			chat_id = User.id, 
			animation = self.__cacher.get_real_cached_file(
				path = "Data/AscendTarobot/Materials/taro_family.gif",
				autoupload_type = types.InputMediaAnimation,
				).file_id,
			caption = "\n\n".join(Text).replace("$action", action),
			parse_mode = "HTML",
			reply_markup = MainInlineKeyboards.for_delete("–°–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å –ø—Ä–∏—Å—Ç—É–ø–∏–º!")
		)

	def __init__(self, masterbot: TeleMaster, chanel: list[int], cacher: TeleCache, usermanager: UsersManager):

		self.__masterbot = masterbot
		self.__chanel = chanel
		self.__cacher = cacher
		self.__usermanager = usermanager

		self.__Templates = WorkpiecesMessages(self.__masterbot.bot, self.__cacher)

	def IsSubscripted(self, User: UserData) -> bool:
		"""
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª/–∫–∞–Ω–∞–ª—ã.

		:param User: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type User: UserData
		:return: –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.
		:rtype: bool
		"""

		if not User.has_property("was_channels_member"): User.set_property("was_channels_member", False) 

		if User.has_permissions(["developer", "admin"]): return True

		if not self.__chanel: return True

		IsSubscribed = self.__masterbot.check_user_subscriptions(User, self.__chanel)

		Subscribtion_Message = None
		if User.has_property("Subscription"): Subscribtion_Message = User.get_property("Subscription")

		if IsSubscribed:

			if User.has_property("invited_by"): 
				
				invitee = self.__usermanager.get_user(User.get_property("invited_by"))
				ascend_data = AscendData(user = invitee)
				ascend_data.add_invited_user(User.id)
				User.remove_property("invited_by")

				if ascend_data.count_invited_users == 1: 
					Sender(self.__masterbot.bot, self.__cacher).worked_referal(invitee.id)
					ascend_data.add_bonus_layouts()
				
			if Subscribtion_Message:
				self.__masterbot.safely_delete_messages(User.id, Subscribtion_Message)
				self.__Templates.send_start_messages(User, title = False)
				self.__send_tarofamily_message(User)
				
				User.set_property("Subscription", None)

			if not User.get_property("was_channels_member"): User.set_property("was_channels_member", True)

		else:
			if Subscribtion_Message: self.__masterbot.safely_delete_messages(User.id, Subscribtion_Message)
			self.__send_requirements(User)

		return IsSubscribed