from dublib.TelebotUtils.Cache import TeleCache
from dublib.TelebotUtils.Users import UserData
from dublib.TelebotUtils import TeleMaster
from dublib.Engine.GetText import _

from Source.InlineKeyboards import InlineKeyboards as BasicInlineKeyboards

from telebot import types

class InlineKeyboards:
	"""–ù–∞–±–æ—Ä inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

	def subscribtion() -> types.InlineKeyboardMarkup:
		menu = types.InlineKeyboardMarkup()

		determinations = {
			_("–¢–≤–æ–π –¢–∞—Ä–æ–ª–æ–≥üåô"): "https://t.me/+ns_u9dpjys1jMjFi",
			_("–ü–æ—Å–ª–∞–Ω–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–πüîÜ"): "https://t.me/+9U9SMzbOwY1iNzFi"
		}
		menu.add(*[types.InlineKeyboardButton(text = name, url = link) for name, link in determinations.items()], row_width = 1)
		menu.add(types.InlineKeyboardButton(_("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!"), callback_data="Subscribe"))

		return menu

class Subscription:
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""

	def __send_requirements(self, User: UserData):
		"""
		–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã.

		:param User: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type User: UserData
		"""
		
		Text = (
			("<b><i>" + _("–î—Ä—É–∑—å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ 2 –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞! üíî") + "</i></b>"),
			_("–ö–∞–∫ –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!\""),
			("<b><i>" + _("–ò –º—ã –≤–∞—Å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ–∫—É–Ω–µ–º –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä –¢–∞—Ä–æ!") + "</i></b>")
		)
		
		Message = self.__masterbot.bot.send_message(
			chat_id = User.id, 
			text = "\n\n".join(Text), 
			parse_mode = "HTML",
			disable_web_page_preview = True,
			reply_markup = InlineKeyboards.subscribtion()
		)

		User.set_property("Subscription", Message.id)
		
	def __send_main_menu(self, User: UserData):
		"""
		–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

		:param User: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type User: UserData
		"""

		self.__masterbot .bot.send_animation(
			chat_id = User.id, 
			animation = self.__cacher.get_real_cached_file(
				path = "Start.mp4", autoupload_type = types.InputMediaAnimation
				).file_id,
			caption = None,
			reply_markup = BasicInlineKeyboards.main_menu(),
			parse_mode = "HTML"
		)

	def __init__(self, masterbot: TeleMaster, chanel: list[int], cacher: TeleCache):
		self.__masterbot = masterbot
		self.__chanel = chanel
		self.__cacher = cacher

	def IsSubscripted(self, User: UserData):
		if not self.__chanel: return True

		IsSubscribed = self.__masterbot.check_user_subscriptions(User, self.__chanel)

		if User.has_property("Subscription"): Subscribtion_Message = User.get_property("Subscription")
		else: Subscribtion_Message = None

		if not IsSubscribed and not Subscribtion_Message: 
			self.__send_requirements(User)
			return IsSubscribed
		
		if not IsSubscribed and Subscribtion_Message: 
			self.__masterbot.safely_delete_messages(
				chat_id = User.id, 
				messages = Subscribtion_Message
				)

			self.__send_requirements(User)
			return IsSubscribed
		
		if IsSubscribed and Subscribtion_Message: 
			self.__masterbot.safely_delete_messages(User.id, Subscribtion_Message)
			self.__send_main_menu(User)
			User.set_property("Subscription", None)
			
			return IsSubscribed
		
		if IsSubscribed and not Subscribtion_Message: 
			return IsSubscribed