from dublib.TelebotUtils import UserData, UsersManager
from dublib.TelebotUtils import TeleMaster
from dublib.TelebotUtils.Cache import TeleCache
from dublib.Engine.GetText import _

from Source.InlineKeyboards import InlineKeyboards

import os
import logging
from datetime import datetime
from telebot import TeleBot, types
		
def IsNewRound(today: str, saved_date: str):
	isNewRound = None

	now = datetime.now()
	day_of_week = now.weekday()

	today_datetime = datetime.strptime(today, "%d.%m.%Y")
	saved_datetime = datetime.strptime(saved_date, "%d.%m.%Y")

	difference = today_datetime - saved_datetime

	if difference <=1: isNewRound = False
	elif difference >1 and day_of_week == 6: isNewRound = False
	else: isNewRound = True

	return isNewRound

def FindNearest(today: str):
	"""
	–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π –¥–∞—Ç—ã –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é

	:param today: —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 22.05.2025
	:type today: str
	:return: —Å–∞–º–∞—è –±–ª–∏–∑–∫–∞—è –¥–∞—Ç–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É –¥–Ω—é –≤ –ø—Ä–æ—à–ª–æ–º (21.05 –∏–ª–∏ 22.05, –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ)
	:rtype: _type_
	"""

	directory_path = "Materials/ChoiceCard/"
	dates = os.listdir(directory_path)
	today_datetime = datetime.strptime(today, "%d.%m.%Y")
	past_dates = []
	
	for date in dates:
		try:
			dir_datetime = datetime.strptime(date, "%d.%m.%Y")
			if dir_datetime < today_datetime:
				past_dates.append(dir_datetime)
		except ValueError:
			continue
	
	closest_past_date = max(past_dates) if past_dates else None
	
	return closest_past_date.strftime("%d.%m.%Y") if closest_past_date else None

def ChoiceMessage(day_of_week: int, Bot: TeleBot, Call: types.CallbackQuery) -> types.Message:
	"""
	–í—ã–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏

	:param day_of_week: –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –≥–¥–µ 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
	:type day_of_week: int
	:param Bot: –ë–æ—Ç Telegram
	:type Bot: TeleBot
	:param Call: ThinkCard
	:type Call: types.CallbackQuery
	:return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	:rtype: types.Message
	"""
	if day_of_week in (0, 1):
		Think_message3 = Bot.send_message(
			Call.message.chat.id, 
			"–ö–∞–∂–¥—ã–π <b>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥—É –∏ –ø—è—Ç–Ω–∏—Ü—É</b> –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç –¥–ª—è –≤–∞—Å \"–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É\". –ú—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –¥–æ—Å—É–≥ —Å –¢–∞—Ä–æ–±–æ—Ç–æ–º –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ)\n\n–ñ–¥—ë–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –≤ <b>—Å—Ä–µ–¥—É!</b> üíñ",
			reply_markup = InlineKeyboards.delete_before_mm(),
			parse_mode = "HTML"
		)
		return Think_message3
	
	if day_of_week in (2, 3):
		Think_message3 = Bot.send_message(
			Call.message.chat.id, 
			"–ö–∞–∂–¥—ã–π <b>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥—É –∏ –ø—è—Ç–Ω–∏—Ü—É</b> –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç –¥–ª—è –≤–∞—Å \"–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É\". –ú—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –¥–æ—Å—É–≥ —Å –¢–∞—Ä–æ–±–æ—Ç–æ–º –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ)\n\n–ñ–¥—ë–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –≤ <b>–ø—è—Ç–Ω–∏—Ü—É!</b>üíó",
			reply_markup = InlineKeyboards.delete_before_mm(),
			parse_mode = "HTML"
		)
		return Think_message3
	if day_of_week in (4, 5, 6):
		Think_message3 = Bot.send_message(
			Call.message.chat.id, 
			"–ö–∞–∂–¥—ã–π <b>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥—É –∏ –ø—è—Ç–Ω–∏—Ü—É</b> –Ω–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç –¥–ª—è –≤–∞—Å \"–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É\". –ú—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –¥–æ—Å—É–≥ —Å –¢–∞—Ä–æ–±–æ—Ç–æ–º –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ)\n\n–ñ–¥—ë–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –≤ <b>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫!</b> üíû",
			reply_markup = InlineKeyboards.delete_before_mm(),
			parse_mode = "HTML"
		)
		return Think_message3
	
def CacherSending(Cacher: TeleCache, Bot: TeleBot, path: str, User: UserData, number_card: int, adding: str = "", inline: InlineKeyboards = None):
	
	ThinkCard = Cacher.get_real_cached_file(path + f"/{number_card}.jpg", types.InputMediaPhoto)

	with open(path + f"/{number_card}.txt") as file:
		Text = file.read()
	Think_message2 = Bot.send_photo(
		chat_id = User.id,
		photo = ThinkCard.file_id,
		caption = Text + adding,
		reply_markup = inline,
		parse_mode = "HTML"
	)
	return Think_message2

def UpdateThinkCardData(User: UserData, Think_message: types.Message):
	ThinkCardData = User.get_property("ThinkCard")
	if ThinkCardData is None:
		ThinkCardData = {"day": None, "messages": [Think_message.id], "number": None}
		User.set_property("ThinkCard", ThinkCardData)
	else:
		ThinkCardData["messages"].append(Think_message.id)
		User.set_property("ThinkCard", ThinkCardData)

def UpdateThinkCardData2(User: UserData, Think_messages: list[types.Message], number_card: int, date: str):
	ThinkCardData = User.get_property("ThinkCard")
	if ThinkCardData is None:
		ThinkCardData = {"day": date, "messages": Think_messages, "number": number_card}
		User.set_property("ThinkCard", ThinkCardData)
	else:
		ThinkCardData["messages"].extend(Think_messages)
		ThinkCardData["number"] = number_card
		ThinkCardData["day"] = date
		User.set_property("ThinkCard", ThinkCardData)

def GetNumberCard(User:UserData, Call: types.CallbackQuery, write: bool = True):
	"""
	–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ 

	:param User: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	:type User: UserData
	:param Call: ThinkCard
	:type Call: types.CallbackQuery
	:param write: –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã,–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, defaults to True
	:type write: bool, optional
	:return: –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
	:rtype: _type_
	"""
	ThinkCardData = User.get_property("ThinkCard")
	if ThinkCardData["number"] != None: number_card = ThinkCardData["number"] 
	else: 
		if write: number_card = int(Call.data.split("_")[-1])
		else: number_card = None
	return number_card

def update_think_card(usermanager: UsersManager):
	"""
	–°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã

	:param usermanager: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞
	:type usermanager: UsersManager
	"""
	for User in usermanager.users:
		try:
			if User.has_property("ThinkCard"):
				ThinkCard = User.get_property("ThinkCard")
				ThinkCard["number"] = None
				User.set_property("ThinkCard", ThinkCard)
		except:
			logging.info(User.id, "–ó–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç–æ–π –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è")

def delete_thinking_messages(user: UserData, master_bot: TeleMaster, call: types.CallbackQuery):
	"""
	–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–∑–∞–≥–∞–¥–∞–π –∫–∞—Ä—Ç—É"

	:param user: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞
	:type user: UserData
	:param master_bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞
	:type master_bot: TeleMaster
	:param call: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞; ThinkCard/ delete_before_mm
	:type call: types.CallbackQuery
	"""

	ThinkCardData = user.get_property("ThinkCard")
	master_bot.safely_delete_messages(call.message.chat.id, user.get_property("ThinkCard")["messages"])
	ThinkCardData["messages"] = []
	user.set_property("ThinkCard", ThinkCardData)
		